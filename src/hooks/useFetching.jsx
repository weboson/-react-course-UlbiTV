import { useState } from "react"

//! кастомных хук, функция шаблона запроса на сервер:
//1) перехвата ошибки (try...catch...finaly) - передает объект ошибок, а в App.js она уже выводится в h1
//2) установка ключа (ориентира для индикации загрузки) в false, если данные не загруженны или ошибка


//3) установка ключа (ориентира для индикации загрузки) в true, если данные полностью загруженны и нет ошибок
export const useFetching = (callback) => { //! callback - это ЛЮБОЙ ЗАПРОС
    const [isLoading, setIsLoading] = useState(false); // ключ для индикации загрузки
    const [error, setError] = useState(''); // состояние ошибки - по-умолчанию пустая строка ''

    // метод (лигическая конструкция), которую можно переиспользовать, где угодно
    const fetching = async () => {
        try {
            setIsLoading(true); // показать индикатор загрузки
            await callback(); //! сам запрос на сервер
        } catch (e) { // e - объект ошибки
            setError(e.message); // установить "сообщение" ошибки
        } finally {
            setIsLoading(false); // в любом завершении - убрать индикатор
        }
    }

    //! и вернуть массив результатов: метод, ключ индикатора и ошибку
    return [fetching, isLoading, error];
}